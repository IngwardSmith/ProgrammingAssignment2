install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
5 + 7
x < 5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
swirl()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Ingward")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x <- 4
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- c(1, 3, 2, 5, 1, 9)
x[x >= 2] <-0
x
pwd
pwd()
hw1_con <- file("~/Desktop/hw1_data.csv")
?read.csv
read.csv(hw1_con, nrows = 2)
read.csv(hw1_con)
read.csv(hw1_con)
read.csv(hw1_con, nrows = 2)
hw1_con <- file("~/Desktop/hw1_data.csv")
read.csv(hw1_con)
read.csv(hw1_con, skip = 151)
hw1_con <- file("~/Desktop/hw1_data.csv")
read.csv(hw1_con, skip = 151)
read.csv("~/Desktop/hw1_data.csv", row.names = 47)
read.csv("~/Desktop/hw1_data.csv", row.names = "47")
read.table("~/Desktop/hw1_data.csv", sep = ",", row.names = 47)
read.table("~/Desktop/hw1_data.csv", sep = ",", row.names = "47")
read.table("~/Desktop/hw1_data.csv", sep = ",", header = TRUE, row.names = "47")
read.table("~/Desktop/hw1_data.csv", sep = ",", header = TRUE, row.names = 47)
read.table("~/Desktop/hw1_data.csv", sep = ",", header = TRUE, 47)
read.table("~/Desktop/hw1_data.csv", sep = ",", header = TRUE)
read.table("~/Desktop/hw1_data.csv", sep = ",", header = TRUE, skip = 46, nrows = 1)
hw_data <- read.table("~/Desktop/hw1_data.csv", sep = ",", header = TRUE)
hw_data
class(hw_data)
ozone <- hw_data$Ozone
ozone
ozone_na <- is.na(ozone)
ozone_na
?sum
sum(ozone_na)
ozone_real <- [!ozone_na]
ozone_real <- ozone[!ozone_na]
ozone_real
?mean
mean(ozone_real)
ozone_over31 <- hw_data$Ozone > 31
ozone_over31
temp_over90 <- hw_data$Temp > 90
temp_over90
o31_and_t90 <- ozone_over31 & temp_over90
o31_and_t90
solarr <- hwdata$Solar.R
solarr <- hw_data$Solar.R
mean(solarr[o31_and_t90])
solarr_cond <- solarr[o31_and_t90]
solarr_cond
ozone_over31 <- (hw_data$Ozone > 31) & (!is.na(hs_data$Ozone))
ozone_over31 <- (hw_data$Ozone > 31) & (!is.na(hw_data$Ozone))
temp_over90 <- (hw_data$Temp > 90) & (!is.na(hw_data$Temp))
o31_and_t90 <- ozone_over31 & temp_over90
o31_and_t90
mean(solarr[o31_and_t90])
month6 <- hw_data$Month == 6
month6
mean(hw_data$Temp[month6])
mean(hw_data$Temp[hw_data$Month == 6])
max(hw_data$Ozone[hw_data$Month == 5])
month5 <- hw_data$Month == 5
hw_data$Ozone
hw_data$Ozone[month5]
?max
max(hw_data$Ozone[month5])
max(hw_data$Ozone[hw_data$Month == 5], na.rm = TRUE)
add2 <- function(x, y) {
x + y
}
add2(5,7)
columnmean(u) {
nc <- ncol(u)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(u[,i])
}
return means
}
columnmean(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
means
}
clear()
clear
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
means
}
columnmean(airquality)
airquality
columnmean <- function(x, removeNA = TRUE) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes()
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
fun1 <- function(x) x+y
fun2 <- function() {
y <- 20
function(x) x+y
}
fun1(3)
fun1(3)
fun1 <- function(x) x+y
fun2 <- function() {
y <- 20
function(x) x+y
}
fun1(3)
y <- 12
fun1(3)
fun3 <- fun2()
fun1
fun3
fin1(5)
fun1(5)
fun3(5)
fun2(5)
## Put comments here that give an overall description of what your
## functions do
## This function receives a matrix 'x' as an argument, sets the 'matrix' variable,
## that will futher contain inversed matrix, to NULL and defines four functions
## set, get, setinverse and getinverse that are returned as a list of functions
makeCacheMatrix <- function(x = matrix()) {
matrix <- NULL
## set function assings received matrix y to a top-environment variable x
## and sets its inverse 'matrix' to NULL, because it's new now.
set <- function(y = matrix()) {
x <<- y
matrix <<- NULL
}
## get function searches for x variable and simply returns it
get <- function() x
## setinverse function assigns received argument 'inverse' to a top-level
## 'matrix' variable
setinverse <- function(inverse) matrix <<- inverse
## getinverse searches for a 'matrix' variable and returns it
getinverse <- function() matrix
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve function receives a matrix x as an argument, tries to find its cache
## if possible. If not possible - it counts it and returns
cacheSolve <- function(x, ...) {
## Uses $getinverse function of data 'x' to get the inversed matrix and assign
## it to the 'matrix' variable
matrix <- x$getinverse()
## if it was not null - then simply returns that cached value
if(!is.null(matrix)) {
message("getting cached matrix")
return(matrix)
}
data <- x$get()
matrix <- solve(data, ...)
x$setinverse(matrix)
## Return a matrix that is the inverse of 'x'
matrix
}
pwd
setwd("~/Google Диск/Coursera/datasciencecoursera/cachematrix")
source("cachematrix.R")
bmatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol-3))
bmatrix$get
bmatrix$get()
bmatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
bmatrix$get()
cacheSolve(bmatrix)
bmatrix$getinverse()
cacheSolve(bmatrix)
bmatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(bmatrix)
bmatrix$getinverse()
bmatrix$get()
cacheSolve(bmatrix)
cmatrix <- makeCacheMatrix(matrix(c(1:36), nrow=6, ncol=6))
cmatrix$get()
cmatrix$getsolve()
cmatrix$getinverse()
cacheSolve(cmatrix)
cmatrix <- makeCacheMatrix(matrix(c(4:40), nrow=6, ncol=6))
cmatrix$get()
cmatrix <- makeCacheMatrix(matrix(c(4:39), nrow=6, ncol=6))
cmatrix$get()
cacheSolve(cmatrix)
cmatrix <- makeCacheMatrix(matrix(c(15:39), nrow=5, ncol=5))
cmatrix$get()
cacheSolve(cmatrix)
cmatrix <- makeCacheMatrix(matrix(c(1:25), nrow=5, ncol=5))
cacheSolve(cmatrix)
cacheSolve(cmatrix)
